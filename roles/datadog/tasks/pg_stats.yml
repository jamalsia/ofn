---
- name: enable postgres logging
  set_fact:
    datadog_checks:
      postgres:
        init_config:
        instances:
          - host: localhost
            port: 5432
            username: datadog
            password: "{{ datadog_db_password }}"
            dbname: "{{ db }}"
            tags:
              - "host:{{ inventory_hostname }}"
            collect_activity_metrics: true
        logs:
          - type: file
            path: /var/log/pg_log/postgresql-*.log
            source: postgresql
            sourcecategory: database
            service: postgres
  when: datadog_db_password is defined

- name: add datadog agent to postgres group
  user:
    name: 'dd-agent'
    groups: postgres
    append: yes
  when: datadog_db_password is defined

- name: check datadog db_integration exists
  command: psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='datadog'"
  become: yes
  become_user: postgres
  register: integration_exists
  changed_when: False

- name: report db_integration status
  fail:
    msg: "The database role `datadog` has not been created. Add it via the `db_integrations` playbook."
  when: integration_exists.stdout != '1'

- name: check datadog views
  command: psql -c "SELECT * FROM pg_catalog.pg_views WHERE viewname = 'pg_stat_activity_dd';"
  become: yes
  become_user: postgres
  register: stat_views_exist
  changed_when: False

- name: add pg_stat function and view
  command: |
    psql -c "CREATE FUNCTION pg_stat_activity()
    RETURNS SETOF pg_catalog.pg_stat_activity AS
    $$ SELECT * from pg_catalog.pg_stat_activity; $$
    LANGUAGE sql VOLATILE SECURITY DEFINER;
    CREATE VIEW pg_stat_activity_dd AS SELECT * FROM pg_stat_activity();
    grant SELECT ON pg_stat_activity_dd to datadog;"
  become: yes
  become_user: postgres
  when: stat_views_exist.stdout.find('0 rows') != -1
