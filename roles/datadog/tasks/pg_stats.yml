---
- name: create extensions
  become: yes
  become_user: postgres
  postgresql_ext:
    name: pg_stat_statements
    db: "{{ db }}"

- name: gather postgres installation info
  include_role:
    name: geerlingguy.postgresql
    tasks_from: variables
  when: enable_datadog_logging is defined and postgresql_config_path is undefined

- name: add postgres logging configuration
  template:
    src: logging.conf.j2
    dest: "{{ postgresql_config_path }}/conf.d/logging.conf"
    owner: postgres
    group: postgres
    mode: 0640
  become: yes
  notify: restart postgres
  when: enable_datadog_logging is defined

- name: enable datadog postgres integration
  template:
    src: dd-postgres.j2
    dest: /etc/datadog-agent/conf.d/postgres.d/conf.yaml
    owner: 'dd-agent'
    group: 'dd-agent'
    mode: 0644
  become: true
  when: datadog_db_password is defined
  notify: restart datadog-agent

- name: add datadog agent to postgres group
  user:
    name: 'dd-agent'
    groups: postgres
    append: yes
  when: datadog_db_password is defined and enable_datadog_logging is defined

- name: check datadog db_integration exists
  command: psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='datadog'"
  become: yes
  become_user: postgres
  register: integration_exists
  changed_when: False

- name: report db_integration status
  fail:
    msg: "The database role `datadog` has not been created. Add it via the `db_integrations` playbook."
  when: integration_exists.stdout != '1'

- name: check datadog views
  command: psql -c "SELECT * FROM pg_catalog.pg_views WHERE viewname = 'pg_stat_activity_dd';"
  become: yes
  become_user: postgres
  register: stat_views_exist
  changed_when: False

- name: add pg_stat function and view
  command: |
    psql -c "CREATE FUNCTION pg_stat_activity()
    RETURNS SETOF pg_catalog.pg_stat_activity AS
    $$ SELECT * from pg_catalog.pg_stat_activity; $$
    LANGUAGE sql VOLATILE SECURITY DEFINER;
    CREATE VIEW pg_stat_activity_dd AS SELECT * FROM pg_stat_activity();
    grant SELECT ON pg_stat_activity_dd to datadog;"
  become: yes
  become_user: postgres
  when: stat_views_exist.stdout.find('0 rows') != -1
  notify: restart postgres
